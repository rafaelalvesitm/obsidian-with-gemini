/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@google/generative-ai/dist/index.js
var require_dist = __commonJS({
  "node_modules/@google/generative-ai/dist/index.js"(exports) {
    "use strict";
    var POSSIBLE_ROLES = ["user", "model", "function", "system"];
    exports.HarmCategory = void 0;
    (function(HarmCategory) {
      HarmCategory["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
      HarmCategory["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
      HarmCategory["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
      HarmCategory["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
      HarmCategory["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
    })(exports.HarmCategory || (exports.HarmCategory = {}));
    exports.HarmBlockThreshold = void 0;
    (function(HarmBlockThreshold) {
      HarmBlockThreshold["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
      HarmBlockThreshold["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
      HarmBlockThreshold["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
      HarmBlockThreshold["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
      HarmBlockThreshold["BLOCK_NONE"] = "BLOCK_NONE";
    })(exports.HarmBlockThreshold || (exports.HarmBlockThreshold = {}));
    exports.HarmProbability = void 0;
    (function(HarmProbability) {
      HarmProbability["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
      HarmProbability["NEGLIGIBLE"] = "NEGLIGIBLE";
      HarmProbability["LOW"] = "LOW";
      HarmProbability["MEDIUM"] = "MEDIUM";
      HarmProbability["HIGH"] = "HIGH";
    })(exports.HarmProbability || (exports.HarmProbability = {}));
    exports.BlockReason = void 0;
    (function(BlockReason) {
      BlockReason["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
      BlockReason["SAFETY"] = "SAFETY";
      BlockReason["OTHER"] = "OTHER";
    })(exports.BlockReason || (exports.BlockReason = {}));
    exports.FinishReason = void 0;
    (function(FinishReason) {
      FinishReason["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
      FinishReason["STOP"] = "STOP";
      FinishReason["MAX_TOKENS"] = "MAX_TOKENS";
      FinishReason["SAFETY"] = "SAFETY";
      FinishReason["RECITATION"] = "RECITATION";
      FinishReason["OTHER"] = "OTHER";
    })(exports.FinishReason || (exports.FinishReason = {}));
    exports.TaskType = void 0;
    (function(TaskType) {
      TaskType["TASK_TYPE_UNSPECIFIED"] = "TASK_TYPE_UNSPECIFIED";
      TaskType["RETRIEVAL_QUERY"] = "RETRIEVAL_QUERY";
      TaskType["RETRIEVAL_DOCUMENT"] = "RETRIEVAL_DOCUMENT";
      TaskType["SEMANTIC_SIMILARITY"] = "SEMANTIC_SIMILARITY";
      TaskType["CLASSIFICATION"] = "CLASSIFICATION";
      TaskType["CLUSTERING"] = "CLUSTERING";
    })(exports.TaskType || (exports.TaskType = {}));
    exports.FunctionCallingMode = void 0;
    (function(FunctionCallingMode) {
      FunctionCallingMode["MODE_UNSPECIFIED"] = "MODE_UNSPECIFIED";
      FunctionCallingMode["AUTO"] = "AUTO";
      FunctionCallingMode["ANY"] = "ANY";
      FunctionCallingMode["NONE"] = "NONE";
    })(exports.FunctionCallingMode || (exports.FunctionCallingMode = {}));
    exports.FunctionDeclarationSchemaType = void 0;
    (function(FunctionDeclarationSchemaType) {
      FunctionDeclarationSchemaType["STRING"] = "STRING";
      FunctionDeclarationSchemaType["NUMBER"] = "NUMBER";
      FunctionDeclarationSchemaType["INTEGER"] = "INTEGER";
      FunctionDeclarationSchemaType["BOOLEAN"] = "BOOLEAN";
      FunctionDeclarationSchemaType["ARRAY"] = "ARRAY";
      FunctionDeclarationSchemaType["OBJECT"] = "OBJECT";
    })(exports.FunctionDeclarationSchemaType || (exports.FunctionDeclarationSchemaType = {}));
    var GoogleGenerativeAIError = class extends Error {
      constructor(message) {
        super(`[GoogleGenerativeAI Error]: ${message}`);
      }
    };
    var GoogleGenerativeAIResponseError = class extends GoogleGenerativeAIError {
      constructor(message, response) {
        super(message);
        this.response = response;
      }
    };
    var GoogleGenerativeAIFetchError = class extends GoogleGenerativeAIError {
      constructor(message, status, statusText, errorDetails) {
        super(message);
        this.status = status;
        this.statusText = statusText;
        this.errorDetails = errorDetails;
      }
    };
    var GoogleGenerativeAIRequestInputError = class extends GoogleGenerativeAIError {
    };
    var DEFAULT_BASE_URL = "https://generativelanguage.googleapis.com";
    var DEFAULT_API_VERSION = "v1beta";
    var PACKAGE_VERSION = "0.11.1";
    var PACKAGE_LOG_HEADER = "genai-js";
    var Task;
    (function(Task2) {
      Task2["GENERATE_CONTENT"] = "generateContent";
      Task2["STREAM_GENERATE_CONTENT"] = "streamGenerateContent";
      Task2["COUNT_TOKENS"] = "countTokens";
      Task2["EMBED_CONTENT"] = "embedContent";
      Task2["BATCH_EMBED_CONTENTS"] = "batchEmbedContents";
    })(Task || (Task = {}));
    var RequestUrl = class {
      constructor(model, task, apiKey, stream, requestOptions) {
        this.model = model;
        this.task = task;
        this.apiKey = apiKey;
        this.stream = stream;
        this.requestOptions = requestOptions;
      }
      toString() {
        var _a, _b;
        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;
        const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;
        let url = `${baseUrl}/${apiVersion}/${this.model}:${this.task}`;
        if (this.stream) {
          url += "?alt=sse";
        }
        return url;
      }
    };
    function getClientHeaders(requestOptions) {
      const clientHeaders = [];
      if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {
        clientHeaders.push(requestOptions.apiClient);
      }
      clientHeaders.push(`${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`);
      return clientHeaders.join(" ");
    }
    async function getHeaders(url) {
      const headers = new Headers();
      headers.append("Content-Type", "application/json");
      headers.append("x-goog-api-client", getClientHeaders(url.requestOptions));
      headers.append("x-goog-api-key", url.apiKey);
      let customHeaders = url.requestOptions.customHeaders;
      if (customHeaders) {
        if (!(customHeaders instanceof Headers)) {
          try {
            customHeaders = new Headers(customHeaders);
          } catch (e) {
            throw new GoogleGenerativeAIRequestInputError(`unable to convert customHeaders value ${JSON.stringify(customHeaders)} to Headers: ${e.message}`);
          }
        }
        for (const [headerName, headerValue] of customHeaders.entries()) {
          if (headerName === "x-goog-api-key") {
            throw new GoogleGenerativeAIRequestInputError(`Cannot set reserved header name ${headerName}`);
          } else if (headerName === "x-goog-api-client") {
            throw new GoogleGenerativeAIRequestInputError(`Header name ${headerName} can only be set using the apiClient field`);
          }
          headers.append(headerName, headerValue);
        }
      }
      return headers;
    }
    async function constructRequest(model, task, apiKey, stream, body, requestOptions) {
      const url = new RequestUrl(model, task, apiKey, stream, requestOptions);
      return {
        url: url.toString(),
        fetchOptions: Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), { method: "POST", headers: await getHeaders(url), body })
      };
    }
    async function makeRequest(model, task, apiKey, stream, body, requestOptions) {
      return _makeRequestInternal(model, task, apiKey, stream, body, requestOptions, fetch);
    }
    async function _makeRequestInternal(model, task, apiKey, stream, body, requestOptions, fetchFn = fetch) {
      const url = new RequestUrl(model, task, apiKey, stream, requestOptions);
      let response;
      try {
        const request = await constructRequest(model, task, apiKey, stream, body, requestOptions);
        response = await fetchFn(request.url, request.fetchOptions);
        if (!response.ok) {
          let message = "";
          let errorDetails;
          try {
            const json = await response.json();
            message = json.error.message;
            if (json.error.details) {
              message += ` ${JSON.stringify(json.error.details)}`;
              errorDetails = json.error.details;
            }
          } catch (e) {
          }
          throw new GoogleGenerativeAIFetchError(`Error fetching from ${url.toString()}: [${response.status} ${response.statusText}] ${message}`, response.status, response.statusText, errorDetails);
        }
      } catch (e) {
        let err = e;
        if (!(e instanceof GoogleGenerativeAIFetchError || e instanceof GoogleGenerativeAIRequestInputError)) {
          err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);
          err.stack = e.stack;
        }
        throw err;
      }
      return response;
    }
    function buildFetchOptions(requestOptions) {
      const fetchOptions = {};
      if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {
        const abortController = new AbortController();
        const signal = abortController.signal;
        setTimeout(() => abortController.abort(), requestOptions.timeout);
        fetchOptions.signal = signal;
      }
      return fetchOptions;
    }
    function addHelpers(response) {
      response.text = () => {
        if (response.candidates && response.candidates.length > 0) {
          if (response.candidates.length > 1) {
            console.warn(`This response had ${response.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`);
          }
          if (hadBadFinishReason(response.candidates[0])) {
            throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
          }
          return getText(response);
        } else if (response.promptFeedback) {
          throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);
        }
        return "";
      };
      response.functionCall = () => {
        if (response.candidates && response.candidates.length > 0) {
          if (response.candidates.length > 1) {
            console.warn(`This response had ${response.candidates.length} candidates. Returning function calls from the first candidate only. Access response.candidates directly to use the other candidates.`);
          }
          if (hadBadFinishReason(response.candidates[0])) {
            throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
          }
          console.warn(`response.functionCall() is deprecated. Use response.functionCalls() instead.`);
          return getFunctionCalls(response)[0];
        } else if (response.promptFeedback) {
          throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);
        }
        return void 0;
      };
      response.functionCalls = () => {
        if (response.candidates && response.candidates.length > 0) {
          if (response.candidates.length > 1) {
            console.warn(`This response had ${response.candidates.length} candidates. Returning function calls from the first candidate only. Access response.candidates directly to use the other candidates.`);
          }
          if (hadBadFinishReason(response.candidates[0])) {
            throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
          }
          return getFunctionCalls(response);
        } else if (response.promptFeedback) {
          throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);
        }
        return void 0;
      };
      return response;
    }
    function getText(response) {
      var _a, _b, _c, _d;
      const textStrings = [];
      if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {
        for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {
          if (part.text) {
            textStrings.push(part.text);
          }
        }
      }
      if (textStrings.length > 0) {
        return textStrings.join("");
      } else {
        return "";
      }
    }
    function getFunctionCalls(response) {
      var _a, _b, _c, _d;
      const functionCalls = [];
      if ((_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) {
        for (const part of (_d = (_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0].content) === null || _d === void 0 ? void 0 : _d.parts) {
          if (part.functionCall) {
            functionCalls.push(part.functionCall);
          }
        }
      }
      if (functionCalls.length > 0) {
        return functionCalls;
      } else {
        return void 0;
      }
    }
    var badFinishReasons = [exports.FinishReason.RECITATION, exports.FinishReason.SAFETY];
    function hadBadFinishReason(candidate) {
      return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);
    }
    function formatBlockErrorMessage(response) {
      var _a, _b, _c;
      let message = "";
      if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {
        message += "Response was blocked";
        if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {
          message += ` due to ${response.promptFeedback.blockReason}`;
        }
        if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {
          message += `: ${response.promptFeedback.blockReasonMessage}`;
        }
      } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {
        const firstCandidate = response.candidates[0];
        if (hadBadFinishReason(firstCandidate)) {
          message += `Candidate was blocked due to ${firstCandidate.finishReason}`;
          if (firstCandidate.finishMessage) {
            message += `: ${firstCandidate.finishMessage}`;
          }
        }
      }
      return message;
    }
    function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    }
    var responseLineRE = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
    function processStream(response) {
      const inputStream = response.body.pipeThrough(new TextDecoderStream("utf8", { fatal: true }));
      const responseStream = getResponseStream(inputStream);
      const [stream1, stream2] = responseStream.tee();
      return {
        stream: generateResponseSequence(stream1),
        response: getResponsePromise(stream2)
      };
    }
    async function getResponsePromise(stream) {
      const allResponses = [];
      const reader = stream.getReader();
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          return addHelpers(aggregateResponses(allResponses));
        }
        allResponses.push(value);
      }
    }
    function generateResponseSequence(stream) {
      return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {
        const reader = stream.getReader();
        while (true) {
          const { value, done } = yield __await(reader.read());
          if (done) {
            break;
          }
          yield yield __await(addHelpers(value));
        }
      });
    }
    function getResponseStream(inputStream) {
      const reader = inputStream.getReader();
      const stream = new ReadableStream({
        start(controller) {
          let currentText = "";
          return pump();
          function pump() {
            return reader.read().then(({ value, done }) => {
              if (done) {
                if (currentText.trim()) {
                  controller.error(new GoogleGenerativeAIError("Failed to parse stream"));
                  return;
                }
                controller.close();
                return;
              }
              currentText += value;
              let match = currentText.match(responseLineRE);
              let parsedResponse;
              while (match) {
                try {
                  parsedResponse = JSON.parse(match[1]);
                } catch (e) {
                  controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: "${match[1]}"`));
                  return;
                }
                controller.enqueue(parsedResponse);
                currentText = currentText.substring(match[0].length);
                match = currentText.match(responseLineRE);
              }
              return pump();
            });
          }
        }
      });
      return stream;
    }
    function aggregateResponses(responses) {
      const lastResponse = responses[responses.length - 1];
      const aggregatedResponse = {
        promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback
      };
      for (const response of responses) {
        if (response.candidates) {
          for (const candidate of response.candidates) {
            const i = candidate.index;
            if (!aggregatedResponse.candidates) {
              aggregatedResponse.candidates = [];
            }
            if (!aggregatedResponse.candidates[i]) {
              aggregatedResponse.candidates[i] = {
                index: candidate.index
              };
            }
            aggregatedResponse.candidates[i].citationMetadata = candidate.citationMetadata;
            aggregatedResponse.candidates[i].finishReason = candidate.finishReason;
            aggregatedResponse.candidates[i].finishMessage = candidate.finishMessage;
            aggregatedResponse.candidates[i].safetyRatings = candidate.safetyRatings;
            if (candidate.content && candidate.content.parts) {
              if (!aggregatedResponse.candidates[i].content) {
                aggregatedResponse.candidates[i].content = {
                  role: candidate.content.role || "user",
                  parts: []
                };
              }
              const newPart = {};
              for (const part of candidate.content.parts) {
                if (part.text) {
                  newPart.text = part.text;
                }
                if (part.functionCall) {
                  newPart.functionCall = part.functionCall;
                }
                if (Object.keys(newPart).length === 0) {
                  newPart.text = "";
                }
                aggregatedResponse.candidates[i].content.parts.push(newPart);
              }
            }
          }
        }
      }
      return aggregatedResponse;
    }
    async function generateContentStream(apiKey, model, params, requestOptions) {
      const response = await makeRequest(
        model,
        Task.STREAM_GENERATE_CONTENT,
        apiKey,
        /* stream */
        true,
        JSON.stringify(params),
        requestOptions
      );
      return processStream(response);
    }
    async function generateContent(apiKey, model, params, requestOptions) {
      const response = await makeRequest(
        model,
        Task.GENERATE_CONTENT,
        apiKey,
        /* stream */
        false,
        JSON.stringify(params),
        requestOptions
      );
      const responseJson = await response.json();
      const enhancedResponse = addHelpers(responseJson);
      return {
        response: enhancedResponse
      };
    }
    function formatSystemInstruction(input) {
      if (input == null) {
        return void 0;
      } else if (typeof input === "string") {
        return { role: "system", parts: [{ text: input }] };
      } else if (input.text) {
        return { role: "system", parts: [input] };
      } else if (input.parts) {
        if (!input.role) {
          return { role: "system", parts: input.parts };
        } else {
          return input;
        }
      }
    }
    function formatNewContent(request) {
      let newParts = [];
      if (typeof request === "string") {
        newParts = [{ text: request }];
      } else {
        for (const partOrString of request) {
          if (typeof partOrString === "string") {
            newParts.push({ text: partOrString });
          } else {
            newParts.push(partOrString);
          }
        }
      }
      return assignRoleToPartsAndValidateSendMessageRequest(newParts);
    }
    function assignRoleToPartsAndValidateSendMessageRequest(parts) {
      const userContent = { role: "user", parts: [] };
      const functionContent = { role: "function", parts: [] };
      let hasUserContent = false;
      let hasFunctionContent = false;
      for (const part of parts) {
        if ("functionResponse" in part) {
          functionContent.parts.push(part);
          hasFunctionContent = true;
        } else {
          userContent.parts.push(part);
          hasUserContent = true;
        }
      }
      if (hasUserContent && hasFunctionContent) {
        throw new GoogleGenerativeAIError("Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.");
      }
      if (!hasUserContent && !hasFunctionContent) {
        throw new GoogleGenerativeAIError("No content is provided for sending chat message.");
      }
      if (hasUserContent) {
        return userContent;
      }
      return functionContent;
    }
    function formatGenerateContentInput(params) {
      let formattedRequest;
      if (params.contents) {
        formattedRequest = params;
      } else {
        const content = formatNewContent(params);
        formattedRequest = { contents: [content] };
      }
      if (params.systemInstruction) {
        formattedRequest.systemInstruction = formatSystemInstruction(params.systemInstruction);
      }
      return formattedRequest;
    }
    function formatEmbedContentInput(params) {
      if (typeof params === "string" || Array.isArray(params)) {
        const content = formatNewContent(params);
        return { content };
      }
      return params;
    }
    var VALID_PART_FIELDS = [
      "text",
      "inlineData",
      "functionCall",
      "functionResponse"
    ];
    var VALID_PARTS_PER_ROLE = {
      user: ["text", "inlineData"],
      function: ["functionResponse"],
      model: ["text", "functionCall"],
      // System instructions shouldn't be in history anyway.
      system: ["text"]
    };
    var VALID_PREVIOUS_CONTENT_ROLES = {
      user: ["model"],
      function: ["model"],
      model: ["user", "function"],
      // System instructions shouldn't be in history.
      system: []
    };
    function validateChatHistory(history) {
      let prevContent;
      for (const currContent of history) {
        const { role, parts } = currContent;
        if (!prevContent && role !== "user") {
          throw new GoogleGenerativeAIError(`First content should be with role 'user', got ${role}`);
        }
        if (!POSSIBLE_ROLES.includes(role)) {
          throw new GoogleGenerativeAIError(`Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(POSSIBLE_ROLES)}`);
        }
        if (!Array.isArray(parts)) {
          throw new GoogleGenerativeAIError("Content should have 'parts' property with an array of Parts");
        }
        if (parts.length === 0) {
          throw new GoogleGenerativeAIError("Each Content should have at least one part");
        }
        const countFields = {
          text: 0,
          inlineData: 0,
          functionCall: 0,
          functionResponse: 0,
          fileData: 0
        };
        for (const part of parts) {
          for (const key of VALID_PART_FIELDS) {
            if (key in part) {
              countFields[key] += 1;
            }
          }
        }
        const validParts = VALID_PARTS_PER_ROLE[role];
        for (const key of VALID_PART_FIELDS) {
          if (!validParts.includes(key) && countFields[key] > 0) {
            throw new GoogleGenerativeAIError(`Content with role '${role}' can't contain '${key}' part`);
          }
        }
        if (prevContent) {
          const validPreviousContentRoles = VALID_PREVIOUS_CONTENT_ROLES[role];
          if (!validPreviousContentRoles.includes(prevContent.role)) {
            throw new GoogleGenerativeAIError(`Content with role '${role}' can't follow '${prevContent.role}'. Valid previous roles: ${JSON.stringify(VALID_PREVIOUS_CONTENT_ROLES)}`);
          }
        }
        prevContent = currContent;
      }
    }
    var SILENT_ERROR = "SILENT_ERROR";
    var ChatSession = class {
      constructor(apiKey, model, params, requestOptions) {
        this.model = model;
        this.params = params;
        this.requestOptions = requestOptions;
        this._history = [];
        this._sendPromise = Promise.resolve();
        this._apiKey = apiKey;
        if (params === null || params === void 0 ? void 0 : params.history) {
          validateChatHistory(params.history);
          this._history = params.history;
        }
      }
      /**
       * Gets the chat history so far. Blocked prompts are not added to history.
       * Blocked candidates are not added to history, nor are the prompts that
       * generated them.
       */
      async getHistory() {
        await this._sendPromise;
        return this._history;
      }
      /**
       * Sends a chat message and receives a non-streaming
       * {@link GenerateContentResult}
       */
      async sendMessage(request) {
        var _a, _b, _c, _d, _e;
        await this._sendPromise;
        const newContent = formatNewContent(request);
        const generateContentRequest = {
          safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
          generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
          tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,
          toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,
          systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,
          contents: [...this._history, newContent]
        };
        let finalResult;
        this._sendPromise = this._sendPromise.then(() => generateContent(this._apiKey, this.model, generateContentRequest, this.requestOptions)).then((result) => {
          var _a2;
          if (result.response.candidates && result.response.candidates.length > 0) {
            this._history.push(newContent);
            const responseContent = Object.assign({
              parts: [],
              // Response seems to come back without a role set.
              role: "model"
            }, (_a2 = result.response.candidates) === null || _a2 === void 0 ? void 0 : _a2[0].content);
            this._history.push(responseContent);
          } else {
            const blockErrorMessage = formatBlockErrorMessage(result.response);
            if (blockErrorMessage) {
              console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
            }
          }
          finalResult = result;
        });
        await this._sendPromise;
        return finalResult;
      }
      /**
       * Sends a chat message and receives the response as a
       * {@link GenerateContentStreamResult} containing an iterable stream
       * and a response promise.
       */
      async sendMessageStream(request) {
        var _a, _b, _c, _d, _e;
        await this._sendPromise;
        const newContent = formatNewContent(request);
        const generateContentRequest = {
          safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
          generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
          tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,
          toolConfig: (_d = this.params) === null || _d === void 0 ? void 0 : _d.toolConfig,
          systemInstruction: (_e = this.params) === null || _e === void 0 ? void 0 : _e.systemInstruction,
          contents: [...this._history, newContent]
        };
        const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest, this.requestOptions);
        this._sendPromise = this._sendPromise.then(() => streamPromise).catch((_ignored) => {
          throw new Error(SILENT_ERROR);
        }).then((streamResult) => streamResult.response).then((response) => {
          if (response.candidates && response.candidates.length > 0) {
            this._history.push(newContent);
            const responseContent = Object.assign({}, response.candidates[0].content);
            if (!responseContent.role) {
              responseContent.role = "model";
            }
            this._history.push(responseContent);
          } else {
            const blockErrorMessage = formatBlockErrorMessage(response);
            if (blockErrorMessage) {
              console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
            }
          }
        }).catch((e) => {
          if (e.message !== SILENT_ERROR) {
            console.error(e);
          }
        });
        return streamPromise;
      }
    };
    async function countTokens(apiKey, model, params, requestOptions) {
      const response = await makeRequest(model, Task.COUNT_TOKENS, apiKey, false, JSON.stringify(Object.assign(Object.assign({}, params), { model })), requestOptions);
      return response.json();
    }
    async function embedContent(apiKey, model, params, requestOptions) {
      const response = await makeRequest(model, Task.EMBED_CONTENT, apiKey, false, JSON.stringify(params), requestOptions);
      return response.json();
    }
    async function batchEmbedContents(apiKey, model, params, requestOptions) {
      const requestsWithModel = params.requests.map((request) => {
        return Object.assign(Object.assign({}, request), { model });
      });
      const response = await makeRequest(model, Task.BATCH_EMBED_CONTENTS, apiKey, false, JSON.stringify({ requests: requestsWithModel }), requestOptions);
      return response.json();
    }
    var GenerativeModel = class {
      constructor(apiKey, modelParams, requestOptions) {
        this.apiKey = apiKey;
        if (modelParams.model.includes("/")) {
          this.model = modelParams.model;
        } else {
          this.model = `models/${modelParams.model}`;
        }
        this.generationConfig = modelParams.generationConfig || {};
        this.safetySettings = modelParams.safetySettings || [];
        this.tools = modelParams.tools;
        this.toolConfig = modelParams.toolConfig;
        this.systemInstruction = formatSystemInstruction(modelParams.systemInstruction);
        this.requestOptions = requestOptions || {};
      }
      /**
       * Makes a single non-streaming call to the model
       * and returns an object containing a single {@link GenerateContentResponse}.
       */
      async generateContent(request) {
        const formattedParams = formatGenerateContentInput(request);
        return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction }, formattedParams), this.requestOptions);
      }
      /**
       * Makes a single streaming call to the model
       * and returns an object containing an iterable stream that iterates
       * over all chunks in the streaming response as well as
       * a promise that returns the final aggregated response.
       */
      async generateContentStream(request) {
        const formattedParams = formatGenerateContentInput(request);
        return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction }, formattedParams), this.requestOptions);
      }
      /**
       * Gets a new {@link ChatSession} instance which can be used for
       * multi-turn chats.
       */
      startChat(startChatParams) {
        return new ChatSession(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools, toolConfig: this.toolConfig, systemInstruction: this.systemInstruction }, startChatParams), this.requestOptions);
      }
      /**
       * Counts the tokens in the provided request.
       */
      async countTokens(request) {
        const formattedParams = formatGenerateContentInput(request);
        return countTokens(this.apiKey, this.model, formattedParams, this.requestOptions);
      }
      /**
       * Embeds the provided content.
       */
      async embedContent(request) {
        const formattedParams = formatEmbedContentInput(request);
        return embedContent(this.apiKey, this.model, formattedParams, this.requestOptions);
      }
      /**
       * Embeds an array of {@link EmbedContentRequest}s.
       */
      async batchEmbedContents(batchEmbedContentRequest) {
        return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, this.requestOptions);
      }
    };
    var GoogleGenerativeAI2 = class {
      constructor(apiKey) {
        this.apiKey = apiKey;
      }
      /**
       * Gets a {@link GenerativeModel} instance for the provided model name.
       */
      getGenerativeModel(modelParams, requestOptions) {
        if (!modelParams.model) {
          throw new GoogleGenerativeAIError(`Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })`);
        }
        return new GenerativeModel(this.apiKey, modelParams, requestOptions);
      }
    };
    exports.ChatSession = ChatSession;
    exports.GenerativeModel = GenerativeModel;
    exports.GoogleGenerativeAI = GoogleGenerativeAI2;
    exports.GoogleGenerativeAIError = GoogleGenerativeAIError;
    exports.GoogleGenerativeAIFetchError = GoogleGenerativeAIFetchError;
    exports.GoogleGenerativeAIRequestInputError = GoogleGenerativeAIRequestInputError;
    exports.GoogleGenerativeAIResponseError = GoogleGenerativeAIResponseError;
    exports.POSSIBLE_ROLES = POSSIBLE_ROLES;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GeminiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var { GoogleGenerativeAI } = require_dist();
var DEFAULT_SETTINGS = {
  APIKey: "",
  promptSummary: "Resuma o texto a seguir: ",
  promptExpand: "Expanda o texto a seguir: ",
  promptRewrite: "Reescreva o texto a seguir: ",
  promptAnswer: "Responda a pergunta a seguir:"
};
var GeminiPlugin = class extends import_obsidian.Plugin {
  // Instância do Google Generative AI
  // Função de inicialização do plugin
  async onload() {
    await this.loadSettings();
    this.genAI = new GoogleGenerativeAI(this.settings.APIKey);
    this.addCommand({
      id: "quick-summary",
      name: "Resumir texto",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        const loadingModal = new LoadingModal(this.app);
        loadingModal.open();
        try {
          const prompt = this.settings.promptSummary + selection;
          const result = await run(prompt, this.genAI);
          const cursor = editor.getCursor();
          editor.replaceRange("\n\n" + result, { line: cursor.line + 1, ch: 0 }, { line: cursor.line + 1, ch: 0 });
          editor.setCursor({ line: cursor.line + 2, ch: 0 });
        } catch (error) {
          new import_obsidian.Notice("Erro ao gerar conte\xFAdo: " + error.message);
        } finally {
          loadingModal.close();
        }
      }
    });
    this.addCommand({
      id: "quick-expand",
      name: "Expandir texto",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        const loadingModal = new LoadingModal(this.app);
        loadingModal.open();
        try {
          const prompt = this.settings.promptExpand + selection;
          const result = await run(prompt, this.genAI);
          const cursor = editor.getCursor();
          editor.replaceRange("\n\n" + result, { line: cursor.line + 1, ch: 0 }, { line: cursor.line + 1, ch: 0 });
          editor.setCursor({ line: cursor.line + 2, ch: 0 });
        } catch (error) {
          new import_obsidian.Notice("Erro ao gerar conte\xFAdo: " + error.message);
        } finally {
          loadingModal.close();
        }
      }
    });
    this.addCommand({
      id: "quick-rewrite",
      name: "Reescrever texto",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        const loadingModal = new LoadingModal(this.app);
        loadingModal.open();
        try {
          const prompt = this.settings.promptRewrite + selection;
          const result = await run(prompt, this.genAI);
          const cursor = editor.getCursor();
          editor.replaceRange("\n\n" + result, { line: cursor.line + 1, ch: 0 }, { line: cursor.line + 1, ch: 0 });
          editor.setCursor({ line: cursor.line + 2, ch: 0 });
        } catch (error) {
          new import_obsidian.Notice("Erro ao gerar conte\xFAdo: " + error.message);
        } finally {
          loadingModal.close();
        }
      }
    });
    this.addCommand({
      id: "quick-answer",
      name: "Responder texto",
      editorCallback: async (editor, view) => {
        const selection = editor.getSelection();
        const loadingModal = new LoadingModal(this.app);
        loadingModal.open();
        try {
          const prompt = this.settings.promptAnswer + selection;
          const result = await run(prompt, this.genAI);
          const cursor = editor.getCursor();
          editor.replaceRange("\n\n" + result, { line: cursor.line + 1, ch: 0 }, { line: cursor.line + 1, ch: 0 });
          editor.setCursor({ line: cursor.line + 2, ch: 0 });
        } catch (error) {
          new import_obsidian.Notice("Erro ao gerar conte\xFAdo: " + error.message);
        } finally {
          loadingModal.close();
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("Pegue a sua chave de acesso no site do Gemini AI (https://makersuite.google.com/app/apikey?hl=pt-br).").addText((text) => text.setPlaceholder("Sua API KEY").setValue(this.plugin.settings.APIKey).onChange(async (value) => {
      this.plugin.settings.APIKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Prompt para resumos").setDesc('Defina qual base de prompt ser\xE1 utilizada para resumos. Exemplo: "Resuma o texto a seguir"').addText((text) => text.setPlaceholder("Resumo o texto a seguir: ").setValue(this.plugin.settings.promptSummary).onChange(async (value) => {
      this.plugin.settings.promptSummary = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Prompt para expandir").setDesc('Defina qual base de prompt ser\xE1 utilizada para expandir. Exemplo: "Expanda o texto a seguir:"').addText((text) => text.setPlaceholder("Expanda o texto a seguir: ").setValue(this.plugin.settings.promptExpand).onChange(async (value) => {
      this.plugin.settings.promptExpand = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Prompt para reescrever").setDesc('Defina qual base de prompt ser\xE1 utilizada para reescrever. Exemplo: "Reescreva o texto a seguir:"').addText((text) => text.setPlaceholder("Reescreva o texto a seguir: ").setValue(this.plugin.settings.promptRewrite).onChange(async (value) => {
      this.plugin.settings.promptRewrite = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Prompt para responder").setDesc('Defina qual base de prompt ser\xE1 utilizada para responder. Exemplo: "Responda a pergunta a seguir:"').addText((text) => text.setPlaceholder("Responda a pergunta a seguir: ").setValue(this.plugin.settings.promptAnswer).onChange(async (value) => {
      this.plugin.settings.promptAnswer = value;
      await this.plugin.saveSettings();
    }));
  }
};
async function run(prompt, genAI) {
  const model = genAI.getGenerativeModel({ model: "gemini-pro" });
  const result = await model.generateContent(prompt);
  const response = await result.response;
  const text = response.text();
  return text;
}
var LoadingModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("div", { text: "Generating content...", cls: "loading-message" });
    contentEl.createEl("div", { cls: "loading-animation" });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
/*! Bundled license information:

@google/generative-ai/dist/index.js:
  (**
   * @license
   * Copyright 2024 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
